from config import API_TOKEN
from text_bot import (text, text1, text2, text3,
                      text4, text5, text6, text7,
                      text8, text9, animals2, exit, questions, animals)
import logging
from logging.handlers import RotatingFileHandler
import telebot
from telebot import types
import time
import datetime
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# –Ω–∞—Å—Ç—Ä–æ–∏–º rfl
handler = RotatingFileHandler('Logs/LogsBot.log', maxBytes=5000000, backupCount=5, encoding='utf-8')
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(handler)
bot = telebot.TeleBot(API_TOKEN)
logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /help. –ü–æ–º–æ—â—å.
@bot.message_handler(commands=['help'])
def help(message: telebot.types.Message):
    key3 = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æü¶à", callback_data='start')
    button2 = types.InlineKeyboardButton(text="–ö –Ω–∞—á–∞–ª—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ãüòâ", callback_data='quiz')
    key3.add(button1)
    key3.add(button2)
    bot.send_message(message.chat.id, text, reply_markup=key3)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name, message.from_user.username, message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É help.")


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
def contacts(message):
    key4 = types.InlineKeyboardMarkup()
    but1 = types.InlineKeyboardButton(text="–°–ø–∞—Å–∏–±–æ‚ù§Ô∏è", callback_data='menu')
    key4.add(but1)
    bot.send_message(message.chat.id, text4, reply_markup=key4, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name, message.from_user.username, message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É contacts")


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—ã '/start', –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∏.
@bot.message_handler(commands=["start"])
def start(message):
    animals.update({'–ú–∞–Ω—É–ª': 0,
        '–°–æ–≤–∞': 0,
        '–ú–µ–¥–≤–µ–¥—å': 0,
        '–ê–ª—å–ø–∞–∫–∞': 0,})
    key = types.InlineKeyboardMarkup()
    but_1 = (types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—Éü¶à",callback_data="quiz"))
    but_2 = types.InlineKeyboardButton(text="–ü–æ–∫–∞ –Ω–µ —Ö–æ—á—É –Ω–∞—á–∏–Ω–∞—Ç—åüôà",callback_data="no_quiz")
    key.add(but_1)
    key.add(but_2)
    with open('Pictures/manul_on.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption=text1, reply_markup=key, parse_mode="HTML")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name, message.from_user.username, message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É start")


# –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏
def info(message):
    key5 = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—éü¶à", callback_data='menu')
    button2 = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µüåé", url='https://moscowzoo.ru/my-zoo/become-a-guardian/')
    key5.add(button1)
    key5.add(button2)
    with open('Pictures/info.png', 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption=text2, reply_markup=key5, parse_mode="HTML")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name, message.from_user.username, message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É info")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏—Ç–±–µ–∫–∞
def feedback(message):
    key_feedback = types.InlineKeyboardMarkup()
    but_feedback = types.InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ‚ù§Ô∏è", callback_data='menu')
    key_feedback.add(but_feedback)
    text = message.text
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name, message.from_user.username, message.from_user.id} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤")
    with open('Feedback/feedback.txt', 'a', encoding='utf-8') as file:
        file.write(f"{datetime.datetime.now()} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name, message.from_user.id, message.from_user.username} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤: {text}\n")
    bot.reply_to(message, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–Ω–µ–º –ª—É—á—à–µüòâ',reply_markup=key_feedback)
    time.sleep(0.3)
    os.system('python feedback_email.py')
    logger.warning("–ù–∞ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
def callback(message):
    key_callback = types.InlineKeyboardMarkup()
    but_callback = types.InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ, –±—É–¥—É –∂–¥–∞—Ç—å –∑–≤–æ–Ω–∫–∞‚ù§Ô∏è", callback_data='menu')
    key_callback.add(but_callback)
    text = message.text
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name, message.from_user.username, message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫")
    with open('Callback/callback.txt', 'a', encoding='utf-8') as file:
        file.write(f"{datetime.datetime.now()} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name, message.from_user.id, message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫: {text}\n"
                   f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {animals2}\n")
    bot.reply_to(message, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èüòâ',reply_markup=key_callback)
    time.sleep(0.3)
    os.system('python callback_email.py')
    logger.warning("–ù–∞ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª —Å –æ–±—Ä–∞—Ç–Ω—ã–º –∑–≤–æ–Ω–∫–æ–º")
    animals2.clear()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
words_list = ['/help', '/start']
@bot.message_handler()
def check_message(message):
    message_text = message.text.lower()
    if message_text not in words_list:
        bot.delete_message(message.chat.id, message.message_id)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{message.from_user.full_name, message.from_user.username, message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Ç–µ–∫—Å—Ç: {message.text}")


@bot.callback_query_handler(func=lambda c: True)
def starts(c):
    question_count = 9
    answer_count = 4
    but = list()
    keys = list()
    but_1 = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—Éü¶à", callback_data="quiz")
    but_2 = types.InlineKeyboardButton(text="–ü–æ–∫–∞ –Ω–µ —Ö–æ—á—É –Ω–∞—á–∏–Ω–∞—Ç—åüôà", callback_data="no_quiz")
    keys.append(types.InlineKeyboardMarkup())
    keys[0].add(but_1)
    keys[0].add(but_2)
    keys.append(types.InlineKeyboardMarkup())
    button = types.InlineKeyboardButton("–õ–∞–¥–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—Éüëå", callback_data='quiz')
    keys[1].add(button)

# –û–±—ä—è–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    for i in range(1, question_count+1):
        for j in range(1, answer_count+1):
            but.append(types.InlineKeyboardButton(questions[i-1][f'answer{i}{j}'], callback_data=f'answer{i}{j}'))
        keys.append(types.InlineKeyboardMarkup())
        for k in range(1, answer_count+1):
            keys[i+1].add(but[((i-1)*answer_count+k)-1])

    key11 = types.InlineKeyboardMarkup()
    but100 = types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', callback_data='result')
    but200 = types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º',url='https://vk.com/share.php?url=https://t.me/zoomoscow_bot')
    but300 = types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫üìû', callback_data='callback')
    key11.add(but100)
    key11.add(but200)
    key11.add(but300)
    menu = types.InlineKeyboardMarkup()
    menu0 = types.InlineKeyboardButton('–ö–ª—ë–≤–æ, —Å–ø–∞—Å–∏–±–æüòâ', callback_data='menu')
    menu.add(menu0)
    menu1 = types.InlineKeyboardMarkup()
    menu2 = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', callback_data='start')
    menu3 = types.InlineKeyboardButton('–û—Ç–∑—ã–≤/–ü–æ–∂–µ–ª–∞–Ω–∏–µ', callback_data='feedback')
    menu8 = types.InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contact')
    menu4 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Çüåé', url='https://moscowzoo.ru/')
    menu5 = types.InlineKeyboardButton('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', callback_data='info')
    menu6 = types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º', url='https://vk.com/share.php?url=https://t.me/zoomoscow_bot')
    menu7 = types.InlineKeyboardButton('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë', callback_data='exit')
    menu1.add(menu2)
    menu1.add(menu3)
    menu1.add(menu8)
    menu1.add(menu4)
    menu1.add(menu5)
    menu1.add(menu6)
    menu1.add(menu7)


    # –§—É–Ω–∫—Ü–∏—è –≤—ã—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    def result(animals,animals2):
        max_val = max(animals.values())
        global final_animals
        final_animals = {k: v for k, v in animals.items() if v == max_val}
        for animal in final_animals:
            if animal == '–ê–ª—å–ø–∞–∫–∞':
                with open('Pictures/alpaka.jpg', 'rb') as photo:
                    bot.send_photo(c.message.chat.id, photo, caption=text5, reply_markup=key11, parse_mode="HTML")
                    animals2.update({'–ê–ª—å–ø–∞–∫–∞': 9})
                    break
            elif animal == '–°–æ–≤–∞':
                with open('Pictures/sova.jpeg', 'rb') as photo:
                    bot.send_photo(c.message.chat.id, photo, caption=text6, reply_markup=key11, parse_mode="HTML")
                    animals2.update({'–°–æ–≤–∞': 9})
                    break
            elif animal == '–ú–µ–¥–≤–µ–¥—å':
                with open('Pictures/medved.jpg', 'rb') as photo:
                    bot.send_photo(c.message.chat.id, photo, caption=text7, reply_markup=key11, parse_mode="HTML")
                    animals2.update({'–ú–µ–¥–≤–µ–¥—å': 9})
                    break
            elif animal == '–ú–∞–Ω—É–ª':
                with open('Pictures/manul_on.jpg', 'rb') as photo:
                    bot.send_photo(c.message.chat.id, photo, caption=text8, reply_markup=key11, parse_mode="HTML")
                    animals2.update({'–ú–∞–Ω—É–ª': 9})
                    break
        animals.update({'–ú–∞–Ω—É–ª': 0,
                            '–°–æ–≤–∞': 0,
                            '–ú–µ–¥–≤–µ–¥—å': 0,
                            '–ê–ª—å–ø–∞–∫–∞': 0, })
        final_animals.clear()
# –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    if c.data == 'quiz':
        bot.send_message(c.message.chat.id, questions[0]['question1'], reply_markup=keys[2], parse_mode="HTML")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.from_user.full_name, c.from_user.username, c.from_user.id} –Ω–∞—á–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for i in range(1, question_count):
        if c.data == f'answer{i}1':
            animals['–ê–ª—å–ø–∞–∫–∞'] += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{c.from_user.username, c.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {animals}")
            bot.send_message(c.message.chat.id, questions[i][f'question{i + 1}'], reply_markup=keys[i + 2],parse_mode="HTML")
            bot.delete_message(c.message.chat.id, c.message.message_id)
            time.sleep(0.2)
        elif c.data == f'answer{i}2':
            animals['–°–æ–≤–∞'] += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{c.from_user.username, c.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {animals}")
            bot.send_message(c.message.chat.id, questions[i][f'question{i + 1}'], reply_markup=keys[i + 2],parse_mode="HTML")
            bot.delete_message(c.message.chat.id, c.message.message_id)
            time.sleep(0.2)
        elif c.data == f'answer{i}3':
            animals['–ú–µ–¥–≤–µ–¥—å'] += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{c.from_user.username, c.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {animals}")
            bot.send_message(c.message.chat.id, questions[i][f'question{i + 1}'], reply_markup=keys[i + 2],parse_mode="HTML")
            bot.delete_message(c.message.chat.id, c.message.message_id)
            time.sleep(0.2)
        elif c.data == f'answer{i}4':
            animals['–ú–∞–Ω—É–ª'] += 1
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{c.from_user.username, c.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {animals}")
            bot.send_message(c.message.chat.id, questions[i][f'question{i + 1}'], reply_markup=keys[i + 2],parse_mode="HTML")
            bot.delete_message(c.message.chat.id, c.message.message_id)
            time.sleep(0.2)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ result
    if c.data == 'answer91':
        animals['–ê–ª—å–ø–∞–∫–∞'] += 1
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{c.from_user.username, c.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {animals}")
        bot.delete_message(c.message.chat.id, c.message.message_id)
        result(animals, animals2)
    elif c.data == 'answer92':
        animals['–°–æ–≤–∞'] += 1
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{c.from_user.username, c.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {animals}")
        bot.delete_message(c.message.chat.id, c.message.message_id)
        result(animals, animals2)
    elif c.data == 'answer93':
        animals['–ú–µ–¥–≤–µ–¥—å'] += 1
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{c.from_user.username, c.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {animals}")
        bot.delete_message(c.message.chat.id, c.message.message_id)
        result(animals, animals2)
    elif c.data == 'answer94':
        animals['–ú–∞–Ω—É–ª'] += 1
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å{c.from_user.username, c.from_user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {animals}")
        bot.delete_message(c.message.chat.id, c.message.message_id)
        result(animals, animals2)
    # –û—Ç–∫–∞–∑ –æ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    if c.data == 'no_quiz':
        with open('Pictures/manul_off.jpg', 'rb') as photo:
            bot.send_photo(c.message.chat.id, photo, caption=text3, reply_markup=keys[1])
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.from_user.full_name, c.from_user.username, c.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –Ω–∞—á–∏–Ω–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
    # –î—É–±–ª–∏—Ä—É—é—â–∏–π —Å—Ç–∞—Ä—Ç
    if c.data == 'start':
        with open('Pictures/manul_on.jpg', 'rb') as photo:
            bot.send_photo(c.message.chat.id, photo, caption=text1, reply_markup=keys[0], parse_mode="HTML")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.from_user.full_name, c.from_user.username, c.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É start")
    # –ú–µ–Ω—é
    if c.data == 'menu':
        bot.send_message(c.message.chat.id, text='–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?üòä', reply_markup=menu1, parse_mode="HTML")
    # –§–∏–¥–±–µ–∫
    if c.data == 'feedback':
        bot.send_message(c.message.chat.id, text='–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µüòä')
        bot.register_next_step_handler(c.message, feedback)
    # –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
    if c.data == 'callback':
        bot.send_message(c.message.chat.id, text='–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞üòä')
        bot.register_next_step_handler(c.message, callback)
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏
    if c.data == 'info':
        info(c.message)
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    if c.data == 'contact':
        contacts(c.message)
    # –í—ã—Ö–æ–¥, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—â–∞–µ–º—Å—è
    if c.data == 'exit':
        with open('Pictures/info.png', 'rb') as photo:
            bot.send_photo(c.message.chat.id, photo, caption=exit)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.from_user.full_name, c.from_user.username, c.from_user.id} –≤—ã—à–µ–ª")
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if c.data == 'result':
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.")
        for animal in animals2:
            if animal == '–ê–ª—å–ø–∞–∫–∞':
                with open('Pictures/–Ø –ê–ª—å–ø–∞–∫–∞!.jpg', 'rb') as photo:
                    bot.send_document(c.message.chat.id, photo, caption=text9, reply_markup=menu)
                    animals2.clear()
                    break
            elif animal == '–°–æ–≤–∞':
                with open('Pictures/–Ø –°–æ–≤–∞!.jpeg', 'rb') as photo:
                    bot.send_document(c.message.chat.id, photo, caption=text9, reply_markup=menu)
                    animals2.clear()
                    break
            elif animal == '–ú–µ–¥–≤–µ–¥—å':
                with open('Pictures/–Ø –ú–µ–¥–≤–µ–¥—å!.jpg', 'rb') as photo:
                    bot.send_document(c.message.chat.id, photo, caption=text9, reply_markup=menu)
                    animals2.clear()
                    break
            elif animal == '–ú–∞–Ω—É–ª':
                with open('Pictures/–Ø –ú–∞–Ω—É–ª!.jpg', 'rb') as photo:
                    bot.send_document(c.message.chat.id, photo, caption=text9, reply_markup=menu)
                    animals2.clear()
                    break


if __name__ == '__main__':
    bot.polling(none_stop=True)
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞")
